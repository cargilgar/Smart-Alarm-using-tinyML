/* Copyright 2021 Carlos Gil, Daniel Moreno.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#pragma once

#include "constants.h"

/// @file output_handler.h
///
/// @brief Handler to make sense of the output generated by the Interpreter and
/// do something with it.
///
/// @details The result inferred by the Interpreter which is contained within
/// the output tensor presents the probabilistic distribution generated by the
/// softmax function. The output handler receives this distribution through
/// recognizeLabel(int8_t*, uint8_t, bool) and extracts the place where the
/// maximum value of the resultant vector is located.
///
/// In the case of running multiple inferences to improve prediction reliability,
/// output handler, via getMostFrequent(uint8_t*, uint8_t, bool), can receive all
/// the labels result of each inference and determine which was predicted the most.
///
/// It also takes care of enabling/disabling the devices in charge of emit the
/// corresponding singal to wake up the user. For this application, these are a
/// vibration motor and/or a passive buzzer.


/// Struct to store the value of a label and its frequency (i.e. how much is
/// repeated in a sequence)
struct FreqLabel {
    int freq;
    uint8_t label;
    explicit FreqLabel(uint8_t labelNumber) : label(labelNumber), freq(0) {}
};

extern TfLiteStatus setupOutputDevice(tflite::ErrorReporter* error_reporter);

/// This function transforms the distribution from model_output and gives back
/// the maximum value.
/// It also calculates the certainty of the prediction by mapping the 8-bit
/// range (-128, 127) to a scale 0-100 to display it when the formal parameter
/// `msgVerbose` is set to `true`.
uint8_t recognizeLabel(int8_t* arr, bool msgVerbose);
uint8_t getMostFrequent(uint8_t* arrInferences);

void _getFreqLabels(uint8_t* arr, FreqLabel* labels);
void _insertionSort(FreqLabel* arr, uint8_t arrSize);
void _swapPointers(FreqLabel* ptr1, FreqLabel* ptr2);

void triggerAlarm();
void setAlarmOn();
void setAlarmOff();
