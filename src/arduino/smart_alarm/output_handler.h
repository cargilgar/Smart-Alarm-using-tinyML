/* Copyright 2021 Carlos Gil, Daniel Moreno.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#pragma once

#include "constants.h"

/// @file output_handler.h
///
/// @brief Handler to make sense of the output generated by the Interpreter and
/// do something with it.
///
/// @details The result inferred by the Interpreter which is contained within
/// the output tensor presents the probabilistic distribution generated by the
/// softmax function. The output handler receives this distribution through
/// recognizeLabel(int8_t*, uint8_t, bool) and extracts the place where the
/// maximum value of the resultant vector is located.
///
/// In the case of running multiple inferences to improve prediction reliability,
/// the output handler, via getMode(uint8_t*, uint8_t, bool), can receive
/// all the labels result of each inference and determine which was predicted
/// the most.
///
/// It also takes care of enabling/disabling the devices in charge of emit the
/// corresponding signal to wake up the user. For this application, these are a
/// vibration motor and/or a passive buzzer.


/// Struct to store the value of a label and its frequency (i.e. how much is
/// repeated in a sequence)
struct FreqLabel {
    int freq;
    uint8_t label;
    explicit FreqLabel(uint8_t labelNumber) : label(labelNumber), freq(0) {}
};

extern TfLiteStatus setupOutputDevice(tflite::ErrorReporter* error_reporter);

/// This function transforms the distribution from model_output and gives back
/// the maximum value.
/// It also calculates the certainty of the prediction by mapping the 8-bit
/// range (-128, 127) to a scale 0-100 to display it when the formal parameter
/// `msgVerbose` is set to `true`.
uint8_t recognizeLabel(int8_t* arr, bool msgVerbose);

/// Get the label that has been predicted the most in the kInferenceSequence and
/// determine the index.
/// *Note:* Check the explanatory example illustrated in the `.cpp` file.
///
/// @see output_handler.cpp
///
/// @param arrInferences Array containing a sequence of inferences.
/// @return freqLabelsContainer[0].label The label that appears the first after
/// sorting the frequency labels (i.e. the most frequent label).
uint8_t getMode(uint8_t* arrInferences);

/// Assign each inference with the corresponding label, adding up `freq` for
/// each occurrence of that label.
///
/// @param arr Array of inferences passed by getMode(uint8_t*).
/// @param labels The struct to be filled with the number of occurrences (`freq).
void _getFreqLabels(uint8_t* arr, FreqLabel* labels);

/// Sort by descending order the `freq` values of the struct generated.
///
/// @param labels Struct generated in _getFreqLabels(uint8_t*, FreqLabel*).
void _insertionSort(FreqLabel* labels);

/// Helper function for _insertionSort(FreqLabel*) to swap the elements of the
/// struct in place.
///
/// @params FreqLabel* Each of the elements to be swapped with each other.
void _swapPointers(FreqLabel* ptr1, FreqLabel* ptr2);

/// This function simulates the standard sound of the typical alarm. It can also
/// be configured to reproduce a constant beep by setting constBeep to `true`.
///
/// @warning This function is set to run endlessly without any pause. This is
/// because the application is conceived to be finished once we reach to this
/// point. The user simply needs to switch off the Arduino (resetting it again).
/// You can change the loop condition with a timeout if it is more convenient.
///
/// @note For future development, an interrupt may be added so that the user can
/// stop the alarm from ringing (e.g. by clicking a button), keeping the device
/// still on for the next day.
///
/// @param constBeep True to get a constant beep instead of the standard sound.
void triggerAlarm(bool constBeep = false);

void setAlarmOn();
void setAlarmOff();
